/**
 * Lab JavaScript Functions - Simplified Version
 * Version: 2.1
 */

// ===========================
// Copy Code Functionality
// ===========================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–Ω–æ–ø–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –±–ª–æ–∫—ñ–≤ –∫–æ–¥—É
 */
function initializeCopyButtons() {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∫–æ–¥—É
    const codeBlocks = document.querySelectorAll('pre code');

    codeBlocks.forEach((codeBlock, index) => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.createElement('div');
        container.className = 'code-container';

        // –°—Ç–≤–æ—Ä—é—î–º–æ header –∑ –∫–Ω–æ–ø–∫–æ—é
        const header = document.createElement('div');
        header.className = 'code-header';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
        const language = codeBlock.className.match(/language-(\w+)/);
        const langLabel = document.createElement('span');
        langLabel.className = 'code-language';
        langLabel.textContent = language ? language[1].toUpperCase() : 'CODE';

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        const copyButton = document.createElement('button');
        copyButton.className = 'copy-button';
        copyButton.innerHTML = `
            <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z">
                </path>
            </svg>
            <span>–ö–æ–ø—ñ—é–≤–∞—Ç–∏</span>
        `;

        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
        copyButton.addEventListener('click', function() {
            copyToClipboard(codeBlock.textContent, copyButton);
        });

        // –ó–±–∏—Ä–∞—î–º–æ header
        header.appendChild(langLabel);
        header.appendChild(copyButton);

        // –û–±–≥–æ—Ä—Ç–∞—î–º–æ –±–ª–æ–∫ –∫–æ–¥—É
        const pre = codeBlock.parentElement;
        pre.parentNode.insertBefore(container, pre);
        container.appendChild(header);
        container.appendChild(pre);

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–æ pre
        pre.className = 'code';
    });
}

/**
 * –ö–æ–ø—ñ—é—î —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
 * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
 */
async function copyToClipboard(text, button) {
    try {
        await navigator.clipboard.writeText(text);

        // –ó–º—ñ–Ω—é—î–º–æ –≤–∏–≥–ª—è–¥ –∫–Ω–æ–ø–∫–∏
        button.classList.add('copied');
        button.innerHTML = `
            <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M5 13l4 4L19 7"></path>
            </svg>
            <span>–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!</span>
        `;

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            button.classList.remove('copied');
            button.innerHTML = `
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z">
                    </path>
                </svg>
                <span>–ö–æ–ø—ñ—é–≤–∞—Ç–∏</span>
            `;
        }, 2000);

    } catch (err) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        try {
            document.execCommand('copy');
            button.innerHTML = `
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M5 13l4 4L19 7"></path>
                </svg>
                <span>–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!</span>
            `;
            setTimeout(() => {
                button.innerHTML = `
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z">
                        </path>
                    </svg>
                    <span>–ö–æ–ø—ñ—é–≤–∞—Ç–∏</span>
                `;
            }, 2000);
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err);
        }

        document.body.removeChild(textArea);
    }
}

// ===========================
// Tab Navigation
// ===========================

/**
 * –ü–µ—Ä–µ–º–∏–∫–∞—î —Ç–∞–±–∏
 * @param {Event} event - –ü–æ–¥—ñ—è –∫–ª—ñ–∫—É
 * @param {string} tabId - ID —Ç–∞–±–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
 */
function switchTab(event, tabId) {
    // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ —Ç–∞–±–∏
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(btn => btn.classList.remove('active'));
    tabContents.forEach(content => content.classList.remove('active'));

    // –ê–∫—Ç–∏–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–±
    event.target.classList.add('active');
    const targetTab = document.getElementById(tabId);
    if (targetTab) {
        targetTab.classList.add('active');
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤ localStorage
    if (typeof(Storage) !== "undefined") {
        localStorage.setItem('activeTab_' + window.location.pathname, tabId);
    }
}

/**
 * –í—ñ–¥–Ω–æ–≤–ª—é—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±
 */
function restoreActiveTab() {
    if (typeof(Storage) !== "undefined") {
        const savedTab = localStorage.getItem('activeTab_' + window.location.pathname);
        if (savedTab) {
            const tabButton = document.querySelector(`[onclick*="${savedTab}"]`);
            if (tabButton) {
                tabButton.click();
            }
        }
    }
}

// ===========================
// Smooth Scrolling
// ===========================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–ª–∞–≤–Ω—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è —è–∫–æ—Ä–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
 */
function initializeSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;

            const target = document.querySelector(targetId);
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                history.pushState(null, null, targetId);
            }
        });
    });
}

// ===========================
// Code Highlighting
// ===========================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø—ñ–¥—Å–≤—ñ—Ç–∫—É –∫–æ–¥—É
 */
function initializeCodeHighlighting() {
    if (typeof hljs !== 'undefined') {
        hljs.highlightAll();
    }
}

// ===========================
// Print Functionality
// ===========================

/**
 * –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –¥—Ä—É–∫—É
 */
function preparePrint() {
    window.addEventListener('beforeprint', function() {
        // –†–æ–∑–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ç–∞–±–∏ –¥–ª—è –¥—Ä—É–∫—É
        document.querySelectorAll('.tab-content').forEach(content => {
            content.style.display = 'block';
        });
    });

    window.addEventListener('afterprint', function() {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —Ç–∞–±—ñ–≤
        document.querySelectorAll('.tab-content').forEach(content => {
            if (!content.classList.contains('active')) {
                content.style.display = 'none';
            }
        });
    });
}

// ===========================
// Main Initialization
// ===========================

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
 */
function initializeLab() {
    // –ß–µ–∫–∞—î–º–æ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

    function init() {
        console.log('üî¨ Lab environment initialized');

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        initializeCopyButtons();
        initializeSmoothScroll();
        initializeCodeHighlighting();
        restoreActiveTab();
        preparePrint();

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ—è–≤–∏
        document.body.classList.add('loaded');
    }
}

// ===========================
// Utility Functions
// ===========================

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
 */
function downloadResults(data, filename = 'results.json') {
    const json = JSON.stringify(data, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();

    URL.revokeObjectURL(url);
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown
 */
function generateMarkdownReport(labNumber, studentName, results) {
    const date = new Date().toLocaleDateString('uk-UA');

    const markdown = `# –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ${labNumber}
## –°—Ç–µ–≥–∞–Ω–æ–∞–Ω–∞–ª—ñ–∑ LSB

**–°—Ç—É–¥–µ–Ω—Ç:** ${studentName}  
**–î–∞—Ç–∞:** ${date}

## –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

${results}

## –í–∏—Å–Ω–æ–≤–∫–∏

[–¢—É—Ç –±—É–¥—É—Ç—å –≤–∞—à—ñ –≤–∏—Å–Ω–æ–≤–∫–∏]

---
*–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ*
`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = `lab${labNumber}_report.md`;
    link.click();

    URL.revokeObjectURL(url);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
initializeLab();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ HTML
window.labFunctions = {
    switchTab,
    copyToClipboard,
    downloadResults,
    generateMarkdownReport
};