/**
 * PRACTICAL.JS - JavaScript –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Ä–æ–±—ñ—Ç
 * Steganography Fundamentals Course
 * v1.0
 */

// ================================================================
// CHECKLIST FUNCTIONALITY
// ================================================================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —á–µ–∫-–ª–∏—Å—Ç—ñ–≤
 */
function initChecklists() {
    const checklists = document.querySelectorAll('.checklist');

    checklists.forEach(checklist => {
        const items = checklist.querySelectorAll('li');

        items.forEach(item => {
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
            item.addEventListener('click', function(e) {
                e.stopPropagation();
                this.classList.toggle('done');

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤ localStorage
                saveChecklistState(checklist.id);

                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                updateChecklistProgress(checklist);

                // –ê–Ω—ñ–º–∞—Ü—ñ—è
                animateCheckmark(this);
            });

            // –î–æ–¥–∞—î–º–æ hover –µ—Ñ–µ–∫—Ç
            item.addEventListener('mouseenter', function() {
                if (!this.classList.contains('done')) {
                    this.style.paddingLeft = '2.75rem';
                }
            });

            item.addEventListener('mouseleave', function() {
                if (!this.classList.contains('done')) {
                    this.style.paddingLeft = '2.5rem';
                }
            });
        });

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        restoreChecklistState(checklist.id);
    });
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —á–µ–∫-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ Storage API
 */
function saveChecklistState(checklistId) {
    if (!checklistId || !Storage) return;

    const checklist = document.getElementById(checklistId);
    if (!checklist) return;

    const items = checklist.querySelectorAll('li');
    const state = [];

    items.forEach((item, index) => {
        state[index] = item.classList.contains('done');
    });

    Storage.setItem(`checklist_${checklistId}`, state);
}

/**
 * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —á–µ–∫-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ Storage API
 */
function restoreChecklistState(checklistId) {
    if (!checklistId || !Storage) return;

    const savedState = Storage.getItem(`checklist_${checklistId}`);
    if (!savedState) return;

    const checklist = document.getElementById(checklistId);
    if (!checklist) return;

    const items = checklist.querySelectorAll('li');

    items.forEach((item, index) => {
        if (savedState[index]) {
            item.classList.add('done');
        }
    });

    updateChecklistProgress(checklist);
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ–∫-–ª–∏—Å—Ç–∞
 */
function updateChecklistProgress(checklist) {
    const total = checklist.querySelectorAll('li').length;
    const done = checklist.querySelectorAll('li.done').length;
    const percentage = Math.round((done / total) * 100);

    // –®—É–∫–∞—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—É
    let progressElement = checklist.parentElement.querySelector('.checklist-progress');

    if (!progressElement) {
        progressElement = document.createElement('div');
        progressElement.className = 'checklist-progress';
        checklist.parentElement.insertBefore(progressElement, checklist.nextSibling);
    }

    progressElement.innerHTML = `
        <div class="progress-bar">
            <div class="progress-fill" style="width: ${percentage}%"></div>
        </div>
        <div class="progress-text">${done} –∑ ${total} –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${percentage}%)</div>
    `;

    // –Ø–∫—â–æ –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, –¥–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    if (percentage === 100) {
        progressElement.classList.add('complete');
        showCompletionMessage(checklist);
    } else {
        progressElement.classList.remove('complete');
    }
}

/**
 * –ê–Ω—ñ–º–∞—Ü—ñ—è –≥–∞–ª–æ—á–∫–∏ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ
 */
function animateCheckmark(item) {
    item.style.transition = 'all 0.3s ease';

    if (item.classList.contains('done')) {
        // –ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        item.style.transform = 'scale(1.05)';
        setTimeout(() => {
            item.style.transform = 'scale(1)';
        }, 200);
    }
}

/**
 * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
 */
function showCompletionMessage(checklist) {
    const message = document.createElement('div');
    message.className = 'completion-message';
    message.innerHTML = 'üéâ –í—ñ—Ç–∞—î–º–æ! –í—Å—ñ –ø—É–Ω–∫—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ!';

    checklist.parentElement.appendChild(message);

    setTimeout(() => {
        message.classList.add('show');
    }, 100);

    setTimeout(() => {
        message.classList.remove('show');
        setTimeout(() => {
            message.remove();
        }, 500);
    }, 3000);
}

// ================================================================
// TABLE FUNCTIONALITY
// ================================================================

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—å
 */
function initTableSorting() {
    const tables = document.querySelectorAll('.practical-content table');

    tables.forEach(table => {
        const headers = table.querySelectorAll('th');

        headers.forEach((header, index) => {
            header.style.cursor = 'pointer';
            header.title = '–ö–ª–∞—Ü–Ω—ñ—Ç—å –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è';

            // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            const sortIcon = document.createElement('span');
            sortIcon.className = 'sort-icon';
            sortIcon.innerHTML = ' ‚Üï';
            header.appendChild(sortIcon);

            header.addEventListener('click', () => {
                sortTable(table, index);
            });
        });
    });
}

/**
 * –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
function sortTable(table, columnIndex) {
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    const isAscending = table.dataset.sortColumn == columnIndex &&
        table.dataset.sortDirection === 'asc';

    // –°–æ—Ä—Ç—É—î–º–æ —Ä—è–¥–∫–∏
    rows.sort((a, b) => {
        const aText = a.cells[columnIndex].textContent.trim();
        const bText = b.cells[columnIndex].textContent.trim();

        if (isAscending) {
            return bText.localeCompare(aText);
        } else {
            return aText.localeCompare(bText);
        }
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    rows.forEach(row => tbody.appendChild(row));

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    table.dataset.sortColumn = columnIndex;
    table.dataset.sortDirection = isAscending ? 'desc' : 'asc';

    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫–∏
    updateSortIcons(table, columnIndex, isAscending);
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
 */
function updateSortIcons(table, activeColumn, isDescending) {
    const headers = table.querySelectorAll('th');

    headers.forEach((header, index) => {
        const icon = header.querySelector('.sort-icon');
        if (icon) {
            if (index === activeColumn) {
                icon.innerHTML = isDescending ? ' ‚Üì' : ' ‚Üë';
                header.classList.add('sorted');
            } else {
                icon.innerHTML = ' ‚Üï';
                header.classList.remove('sorted');
            }
        }
    });
}

// ================================================================
// COPY CODE FUNCTIONALITY
// ================================================================

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–æ –±–ª–æ–∫—ñ–≤ –∫–æ–¥—É
 */
function initCodeCopy() {
    const codeBlocks = document.querySelectorAll('pre');

    codeBlocks.forEach(block => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper';
        block.parentNode.insertBefore(wrapper, block);
        wrapper.appendChild(block);

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        const copyButton = document.createElement('button');
        copyButton.className = 'copy-code-btn';
        copyButton.innerHTML = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏';
        copyButton.title = '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥';
        wrapper.appendChild(copyButton);

        copyButton.addEventListener('click', () => {
            copyCodeToClipboard(block, copyButton);
        });
    });
}

/**
 * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
 */
function copyCodeToClipboard(codeBlock, button) {
    const code = codeBlock.textContent;

    navigator.clipboard.writeText(code).then(() => {
        // –£—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ
        button.innerHTML = '‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
        button.classList.add('success');

        setTimeout(() => {
            button.innerHTML = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏';
            button.classList.remove('success');
        }, 2000);
    }).catch(err => {
        // –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        button.innerHTML = '‚ùå –ü–æ–º–∏–ª–∫–∞';
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err);

        setTimeout(() => {
            button.innerHTML = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏';
        }, 2000);
    });
}

// ================================================================
// PROGRESS TRACKING
// ================================================================

/**
 * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
 */
function trackProgress() {
    const practicalId = getPracticalId();
    if (!practicalId || !Storage) return;

    const startTime = Storage.getItem(`practical_${practicalId}_start`);

    if (!startTime) {
        // –ü–µ—Ä—à–∏–π –≤—Ö—ñ–¥ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É
        Storage.setItem(`practical_${practicalId}_start`, Date.now());
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
    Storage.setItem(`practical_${practicalId}_last_visit`, Date.now());

    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å
    trackTimeSpent();
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ URL –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
function getPracticalId() {
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ URL
    const urlMatch = window.location.pathname.match(/practical_(\d+_\d+)/);
    if (urlMatch) return urlMatch[1];

    // –ê–±–æ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const titleMatch = document.title.match(/–ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ (\d+\.\d+)/);
    if (titleMatch) return titleMatch[1].replace('.', '_');

    return null;
}

/**
 * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
 */
function trackTimeSpent() {
    const practicalId = getPracticalId();
    if (!practicalId || !Storage) return;

    let timeSpent = parseInt(Storage.getItem(`practical_${practicalId}_time`) || 0);

    setInterval(() => {
        timeSpent += 60; // –î–æ–¥–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É
        Storage.setItem(`practical_${practicalId}_time`, timeSpent);
        updateTimeDisplay(timeSpent);
    }, 60000); // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É
 */
function updateTimeDisplay(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    let timeDisplay = document.getElementById('time-spent');

    if (!timeDisplay) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É
        const infoCard = document.querySelector('.card-body');
        if (infoCard) {
            timeDisplay = document.createElement('div');
            timeDisplay.id = 'time-spent';
            timeDisplay.className = 'time-spent';
            infoCard.appendChild(timeDisplay);
        }
    }

    if (timeDisplay) {
        timeDisplay.innerHTML = `‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${hours}–≥ ${minutes}—Ö–≤`;
    }
}

// ================================================================
// DOWNLOAD TRACKING
// ================================================================

/**
 * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
 */
function trackDownloads() {
    const downloadButtons = document.querySelectorAll('.download-btn');

    downloadButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const fileName = button.textContent.trim();
            const practicalId = getPracticalId();

            if (!Storage) return;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const downloads = Storage.getItem('downloads', []);
            downloads.push({
                practical: practicalId,
                file: fileName,
                timestamp: Date.now()
            });
            Storage.setItem('downloads', downloads);

            console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${fileName}`);
        });
    });
}

// ================================================================
// ADDITIONAL STYLES
// ================================================================

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 */
function addDynamicStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* Progress bar –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç—ñ–≤ */
        .checklist-progress {
            margin-top: 1rem;
            padding: 1rem;
            background: #f0f9ff;
            border-radius: 8px;
            border: 1px solid #bfdbfe;
        }
        
        .progress-bar {
            height: 8px;
            background: #e0e7ff;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6, #1e40af);
            transition: width 0.3s ease;
            border-radius: 4px;
        }
        
        .progress-text {
            font-size: 0.875rem;
            color: #1e40af;
            font-weight: 500;
        }
        
        .checklist-progress.complete {
            background: #dcfce7;
            border-color: #86efac;
        }
        
        .checklist-progress.complete .progress-fill {
            background: linear-gradient(90deg, #22c55e, #16a34a);
        }
        
        .checklist-progress.complete .progress-text {
            color: #16a34a;
        }
        
        /* Completion message */
        .completion-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
            font-size: 1.25rem;
            font-weight: 600;
            color: #16a34a;
            z-index: 1000;
            transition: transform 0.3s ease;
        }
        
        .completion-message.show {
            transform: translate(-50%, -50%) scale(1);
        }
        
        /* Code block wrapper */
        .code-block-wrapper {
            position: relative;
            margin: 1.5rem 0;
        }
        
        .copy-code-btn {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid #e5e7eb;
            padding: 0.25rem 0.75rem;
            border-radius: 6px;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .copy-code-btn:hover {
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .copy-code-btn.success {
            background: #dcfce7;
            border-color: #86efac;
            color: #16a34a;
        }
        
        /* Sort icons */
        th.sorted {
            background: #1e3a8a !important;
        }
        
        .sort-icon {
            opacity: 0.7;
            font-size: 0.875rem;
            margin-left: 0.25rem;
        }
        
        th:hover .sort-icon {
            opacity: 1;
        }
        
        /* Time spent display */
        .time-spent {
            margin-top: 1rem;
            padding: 0.5rem 1rem;
            background: #fef3c7;
            border-radius: 6px;
            display: inline-block;
            font-size: 0.875rem;
            color: #92400e;
            font-weight: 500;
        }
    `;
    document.head.appendChild(style);
}

// ================================================================
// INITIALIZATION
// ================================================================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìö –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏...');

    // –î–æ–¥–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ —Å—Ç–∏–ª—ñ
    addDynamicStyles();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    initChecklists();
    initTableSorting();
    initCodeCopy();

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    trackProgress();
    trackDownloads();

    console.log('‚úÖ –ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
});

// ================================================================
// EXPORT
// ================================================================

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initChecklists,
        initTableSorting,
        initCodeCopy,
        trackProgress,
        trackDownloads
    };
}