/**
 * LANDING.JS - Steganography Course
 * JavaScript –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫—É—Ä—Å—É "–û—Å–Ω–æ–≤–∏ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—ó"
 *
 * –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ banking-information-systems
 * –í–µ—Ä—Å—ñ—è: 2.0
 */

class StegoLandingPage {
    constructor() {
        this.modules = [];
        this.courseData = null;
        this.activeTab = 'lectures';
        this.init();
    }

    async init() {
        try {
            console.log('üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫—É—Ä—Å—É —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—ó...');
            await this.loadCourseData();
            this.updateStats();
            this.setupTabs();
            this.renderActiveTab();
            console.log('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫—É—Ä—Å—É:', error);
            this.showError();
        }
    }

    async loadCourseData() {
        const response = await fetch('assets/data/modules.json');
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        this.courseData = await response.json();
        this.modules = this.courseData.modules || [];
        console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –∫—É—Ä—Å—É:', this.courseData.courseInfo);
    }

    updateStats() {
        if (!this.courseData) return;

        const info = this.courseData.courseInfo;
        const totalModulesEl = document.getElementById('total-modules');
        const totalLecturesEl = document.getElementById('total-lectures');
        const totalLabsEl = document.getElementById('total-labs');
        const totalHoursEl = document.getElementById('total-hours');

        if (totalModulesEl) totalModulesEl.textContent = info.totalModules || 4;
        if (totalLecturesEl) totalLecturesEl.textContent = info.totalLectures || 16;
        if (totalLabsEl) totalLabsEl.textContent = info.totalLabs || 34;
        if (totalHoursEl) totalHoursEl.textContent = info.estimatedHours || 100;
    }

    setupTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    switchTab(tabName) {
        this.activeTab = tabName;

        // –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç–∞–±—ñ–≤
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });

        // –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—ñ–≤
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.toggle('active', content.id === `${tabName}-tab`);
        });

        this.renderActiveTab();
        console.log(`üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±: ${tabName}`);
    }

    renderActiveTab() {
        if (this.activeTab === 'lectures') {
            this.renderLectures();
        } else if (this.activeTab === 'labs') {
            this.renderLabs();
        }
    }

    renderLectures() {
        const container = document.getElementById('lectures-container');
        if (!container || this.modules.length === 0) {
            this.showError('lectures-container');
            return;
        }

        container.innerHTML = '';

        this.modules.forEach((module, index) => {
            if (module.lectures && module.lectures.length > 0) {
                const moduleCard = this.createLectureModuleCard(module, index + 1);
                container.appendChild(moduleCard);
            }
        });

        this.attachLectureEventListeners();
        console.log(`üìñ –í—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${this.modules.length} –º–æ–¥—É–ª—ñ–≤ –∑ –ª–µ–∫—Ü—ñ—è–º–∏`);
    }

    renderLabs() {
        const container = document.getElementById('labs-container');
        if (!container) {
            this.showError('labs-container');
            return;
        }

        container.innerHTML = '';

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ –∑ —É—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤
        const allLabs = [];
        this.modules.forEach(module => {
            if (module.labs) {
                module.labs.forEach(lab => {
                    allLabs.push({
                        ...lab,
                        moduleId: module.id,
                        moduleName: module.title,
                        moduleEmoji: module.emoji
                    });
                });
            }
        });

        if (allLabs.length === 0) {
            container.innerHTML = `
                <div class="col-span-full text-center py-12">
                    <div class="text-6xl mb-4">üî¨</div>
                    <h3 class="text-xl font-semibold mb-2">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏</h3>
                    <p class="text-gray-600">–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º</p>
                </div>
            `;
            return;
        }

        allLabs.forEach(lab => {
            const labCard = this.createLabCard(lab);
            container.appendChild(labCard);
        });

        console.log(`üî¨ –í—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${allLabs.length} –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö —Ä–æ–±—ñ—Ç`);
    }

    createLectureModuleCard(module, position) {
        const card = document.createElement('div');
        card.className = 'module-preview';

        const statusBadge = this.getStatusBadge(module.status);

        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏—Ö –ª–µ–∫—Ü—ñ–π
        const completedLectures = module.lectures.filter(l => l.status === 'completed').length;
        const totalLectures = module.lectures.length;

        card.innerHTML = `
            <div class="module-number">${position}</div>
            <div class="module-preview-content">
                <div class="flex justify-between items-start mb-4">
                    <h3 class="module-preview-title">${module.emoji || 'üìö'} ${module.title}</h3>
                    ${statusBadge}
                </div>
                <p class="module-preview-description mb-4">${module.description}</p>
                
                <div class="module-section">
                    <div class="module-section-title">
                        <span>üìñ –õ–µ–∫—Ü—ñ—ó (${completedLectures}/${totalLectures}):</span>
                    </div>
                    <div class="module-items">
                        ${this.renderModuleLectures(module.lectures, module.id)}
                    </div>
                </div>
                
                ${module.labs && module.labs.length > 0 ? `
                    <div class="module-section mt-4">
                        <div class="module-section-title">
                            <span>üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ (${module.labs.length}):</span>
                        </div>
                        <div class="module-items">
                            ${this.renderModuleLabs(module.labs, module.id)}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;

        return card;
    }

    renderModuleLectures(lectures, moduleId) {
        return lectures.map(lecture => {
            const statusIcon = lecture.status === 'completed' ? '‚úÖ' :
                lecture.status === 'in_progress' ? 'üîÑ' : 'üìã';

            return `
                <div class="module-item module-lecture ${lecture.status}" 
                     data-module-id="${moduleId}" 
                     data-lecture-id="${lecture.id}">
                    <span class="module-item-title">
                        ${statusIcon} ${lecture.title}
                    </span>
                    ${lecture.duration ? `<span class="module-item-meta">${lecture.duration} —Ö–≤</span>` : ''}
                </div>
            `;
        }).join('');
    }

    renderModuleLabs(labs, moduleId) {
        return labs.map(lab => `
            <div class="module-item module-lab" 
                 data-module-id="${moduleId}" 
                 data-lab-id="${lab.id}">
                <span class="module-item-title">
                    ${lab.title}
                </span>
                ${lab.estimatedTime ? `<span class="module-item-meta">${lab.estimatedTime} —Ö–≤</span>` : ''}
            </div>
        `).join('');
    }

    createLabCard(lab) {
        const card = document.createElement('div');
        card.className = 'practical-card';

        const typeIcon = lab.type === 'programming' ? 'üíª' :
            lab.type === 'analysis' ? 'üìä' :
                lab.type === 'implementation' ? '‚öôÔ∏è' :
                    lab.type === 'machine-learning' ? 'ü§ñ' : 'üî¨';

        card.innerHTML = `
            <div class="practical-header">
                <div class="practical-icon">${typeIcon}</div>
                <div class="practical-meta">
                    <span class="practical-type">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ${lab.id}</span>
                    <span class="practical-module">${lab.moduleEmoji} ${lab.moduleName}</span>
                </div>
            </div>
            <h3 class="practical-title">${lab.title}</h3>
            <p class="practical-description">${lab.description}</p>
            ${lab.estimatedTime ? `
                <div class="practical-time">
                    ‚è±Ô∏è –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å: ${lab.estimatedTime} —Ö–≤
                </div>
            ` : ''}
        `;

        card.addEventListener('click', () => {
            this.openLab(lab.moduleId, lab.id);
        });

        return card;
    }

    attachLectureEventListeners() {
        const lectureItems = document.querySelectorAll('.module-lecture');
        lectureItems.forEach(item => {
            item.addEventListener('click', () => {
                const moduleId = item.dataset.moduleId;
                const lectureId = item.dataset.lectureId;
                this.openLecture(moduleId, lectureId);
            });
        });

        const labItems = document.querySelectorAll('.module-lab');
        labItems.forEach(item => {
            item.addEventListener('click', () => {
                const moduleId = item.dataset.moduleId;
                const labId = item.dataset.labId;
                this.openLab(moduleId, labId);
            });
        });
    }

    getStatusBadge(status) {
        const statusConfig = {
            'active': { text: '–ê–∫—Ç–∏–≤–Ω–∏–π', class: 'badge-success' },
            'completed': { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', class: 'badge-primary' },
            'planned': { text: '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ', class: 'badge-outline' },
            'in_progress': { text: '–í –ø—Ä–æ—Ü–µ—Å—ñ', class: 'badge-warning' }
        };

        const config = statusConfig[status] || statusConfig['planned'];
        return `<span class="badge ${config.class}">${config.text}</span>`;
    }

    openLecture(moduleId, lectureId) {
        console.log(`üìñ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ª–µ–∫—Ü—ñ—ó ${moduleId}.${lectureId}`);

        // –î–ª—è –ª–µ–∫—Ü—ñ—ó 1.1 –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏
        if (moduleId == 1 && lectureId === '1.1') {
            window.location.href = 'lectures/lecture1/index.html';
            return;
        }

        // –î–ª—è —ñ–Ω—à–∏—Ö - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        alert(`üìñ –õ–µ–∫—Ü—ñ—è ${lectureId} –º–æ–¥—É–ª—è ${moduleId} –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è`);
    }

    openLab(moduleId, labId) {
        console.log(`üî¨ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó ${moduleId}.${labId}`);
        alert(`üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ${labId} –º–æ–¥—É–ª—è ${moduleId} –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è`);
    }

    showError(containerId = 'lectures-container') {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="col-span-full">
                    <div class="alert alert-error">
                        <div class="alert-title">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>
                        –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫—É—Ä—Å—É.
                        <br><small>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É assets/data/modules.json</small>
                    </div>
                </div>
            `;
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è StegoLandingPage...');
    new StegoLandingPage();
});

// Smooth scroll –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å
document.addEventListener('click', (e) => {
    const link = e.target.closest('a[href^="#"]');
    if (link) {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
            targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }
});

// Performance monitoring
window.addEventListener('load', () => {
    if (window.performance && window.performance.timing) {
        const navigation = window.performance.timing;
        const loadTime = navigation.loadEventEnd - navigation.navigationStart;

        if (loadTime > 0 && loadTime < 30000) {
            console.log(`‚ö° –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${loadTime}ms`);
        }
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { StegoLandingPage };
}