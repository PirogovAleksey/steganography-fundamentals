/**
 * LANDING.JS - Steganography Course
 * JavaScript –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫—É—Ä—Å—É "–û—Å–Ω–æ–≤–∏ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—ó"
 *
 * –í–µ—Ä—Å—ñ—è: 2.2 - ES6 Modules + Constants
 */

// ES6 Module Imports
import { Storage } from './storage.js';
import {
    PATHS,
    MESSAGES,
    getLabTypeIcon,
    getLabTypeLabel,
    getStatusBadge,
    getLectureStatusIcon
} from './constants.js';

class StegoLandingPage {
    constructor() {
        this.modules = [];
        this.labs = [];
        this.courseData = null;
        this.activeTab = 'lectures';
        this.init();
    }

    async init() {
        try {
            console.log('üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫—É—Ä—Å—É —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—ó...');
            await this.loadCourseData();
            this.updateStats();
            this.setupTabs();
            this.renderActiveTab();
            console.log('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫—É—Ä—Å—É:', error);
            this.showError();
        }
    }

    async loadCourseData() {
        const response = await fetch(PATHS.DATA_MODULES);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        this.courseData = await response.json();
        this.modules = this.courseData.modules || [];
        this.labs = this.courseData.labs || [];
        console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –∫—É—Ä—Å—É:', this.courseData.courseInfo);
    }

    updateStats() {
        if (!this.courseData) return;

        const info = this.courseData.courseInfo;
        const totalModulesEl = document.getElementById('total-modules');
        const totalLecturesEl = document.getElementById('total-lectures');
        const totalLabsEl = document.getElementById('total-labs');
        const totalHoursEl = document.getElementById('total-hours');

        if (totalModulesEl) totalModulesEl.textContent = info.totalModules || 4;
        if (totalLecturesEl) totalLecturesEl.textContent = info.totalLectures || 16;
        if (totalLabsEl) totalLabsEl.textContent = info.totalLabs || 17;
        if (totalHoursEl) totalHoursEl.textContent = info.estimatedHours || 100;
    }

    setupTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    switchTab(tabName) {
        this.activeTab = tabName;

        // –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç–∞–±—ñ–≤
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });

        // –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—ñ–≤
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.toggle('active', content.id === `${tabName}-tab`);
        });

        this.renderActiveTab();
        console.log(`üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±: ${tabName}`);
    }

    renderActiveTab() {
        if (this.activeTab === 'lectures') {
            this.renderLectures();
        } else if (this.activeTab === 'labs') {
            this.renderLabs();
        }
    }

    renderLectures() {
        const container = document.getElementById('lectures-container');
        if (!container || this.modules.length === 0) {
            this.showError('lectures-container');
            return;
        }

        container.innerHTML = '';

        this.modules.forEach((module, index) => {
            if (module.lectures && module.lectures.length > 0) {
                const moduleCard = this.createLectureModuleCard(module, index + 1);
                container.appendChild(moduleCard);
            }
        });

        console.log(`üìñ –í—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${this.modules.length} –º–æ–¥—É–ª—ñ–≤ –∑ –ª–µ–∫—Ü—ñ—è–º–∏`);
    }

    renderLabs() {
        const container = document.getElementById('labs-container');
        if (!container) {
            this.showError('labs-container');
            return;
        }

        container.innerHTML = '';

        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å
        const header = document.createElement('div');
        header.className = 'col-span-full';
        header.innerHTML = `
            <h2 class="section-title">üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏ –∑ –∫—É—Ä—Å—É "–û—Å–Ω–æ–≤–∏ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—ó"</h2>
            <p class="section-subtitle mb-6">–°–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö —Ä–æ–±—ñ—Ç</p>
        `;
        container.appendChild(header);

        if (this.labs.length === 0) {
            container.innerHTML += `
                <div class="col-span-full text-center py-12">
                    <div class="text-6xl mb-4">üî¨</div>
                    <h3 class="text-xl font-semibold mb-2">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏</h3>
                    <p class="text-gray-600">–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</p>
                </div>
            `;
            return;
        }

        this.labs.forEach((lab, index) => {
            const labCard = this.createLabCard(lab, index + 1);
            container.appendChild(labCard);
        });

        console.log(`üî¨ –í—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${this.labs.length} –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö —Ä–æ–±—ñ—Ç`);
    }

    createLectureModuleCard(module, position) {
        const card = document.createElement('div');
        card.className = 'module-preview';

        // –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –º–æ–¥—É–ª—è
        card.style.cursor = 'pointer';
        card.onclick = function() {
            window.location.href = PATHS.MODULE(module.id);
        };

        const statusBadge = getStatusBadge(module.status);

        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏—Ö –ª–µ–∫—Ü—ñ–π
        const completedLectures = module.lectures.filter(l => l.status === 'completed').length;
        const totalLectures = module.lectures.length;

        card.innerHTML = `
            <div class="module-number">${position}</div>
            <div class="module-preview-content">
                <div class="flex justify-between items-start mb-4">
                    <h3 class="module-preview-title">${module.emoji || 'üìö'} ${module.title}</h3>
                    ${statusBadge}
                </div>
                <p class="module-preview-description mb-4">${module.description}</p>

                <div class="module-section">
                    <div class="module-section-title">
                        <span>üìñ –õ–µ–∫—Ü—ñ—ó (${completedLectures}/${totalLectures}):</span>
                    </div>
                    <div class="module-items">
                        ${this.renderModuleLectures(module.lectures, module.id)}
                    </div>
                </div>

                <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid #e5e7eb;">
                    <a href="${PATHS.MODULE(module.id)}"
                       class="module-action-button"
                       style="display: block; text-decoration: none; color: white;"
                       onclick="event.stopPropagation();">
                        –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–æ–¥—É–ª—è ‚Üí
                    </a>
                </div>
            </div>
        `;

        return card;
    }

    renderModuleLectures(lectures, moduleId) {
        return lectures.map(lecture => {
            const statusIcon = getLectureStatusIcon(lecture.status);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ª–µ–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª—ñ–∫—É
            const isClickable = lecture.status === 'completed' && lecture.path;
            const clickHandler = isClickable
                ? `onclick="event.stopPropagation(); window.location.href='${PATHS.MODULE_LECTURE(moduleId, lecture.path)}';"`
                : 'onclick="event.stopPropagation();"';
            const cursorStyle = isClickable ? 'style="cursor: pointer;"' : '';

            return `
                <div class="module-item module-lecture ${lecture.status}"
                     ${clickHandler}
                     ${cursorStyle}
                     data-module-id="${moduleId}"
                     data-lecture-id="${lecture.id}">
                    <span class="module-item-title">
                        ${statusIcon} ${lecture.title}
                    </span>
                    ${lecture.duration ? `<span class="module-item-meta">${lecture.duration} —Ö–≤</span>` : ''}
                </div>
            `;
        }).join('');
    }

    createLabCard(lab, position) {
        const card = document.createElement('div');
        card.className = 'practical-card';

        const typeIcon = getLabTypeIcon(lab.type);
        const typeLabel = getLabTypeLabel(lab.type);

        card.innerHTML = `
            <div class="practical-header">
                <div class="practical-icon">${typeIcon}</div>
                <div class="practical-meta">
                    <span class="practical-type">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ ${position}</span>
                    <span class="practical-module">${typeLabel}</span>
                </div>
            </div>
            <h3 class="practical-title">${lab.title}</h3>
            <p class="practical-description">${lab.description}</p>
            ${lab.estimatedTime ? `
                <div class="practical-time">
                    ‚è±Ô∏è –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å: ${lab.estimatedTime} —Ö–≤
                </div>
            ` : ''}
        `;

        card.addEventListener('click', () => {
            this.openLab(lab.id);
        });

        return card;
    }

    openLab(labId) {
        console.log(`üî¨ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó ${labId}`);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É –≤ –¥–∞–Ω–∏—Ö
        const lab = this.labs.find(l => l.id === labId);

        if (lab && lab.status === 'completed') {
            // –Ø–∫—â–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ –º–∞—î –≤–ª–∞—Å–Ω–∏–π path, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            if (lab.path) {
                window.location.href = lab.path;
            } else {
                // –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à–ª—è—Ö
                window.location.href = PATHS.LAB(labId);
            }
        } else {
            alert(MESSAGES.INFO.LAB_COMING_SOON(labId));
        }
    }

    showError(containerId = 'lectures-container') {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="col-span-full">
                    <div class="alert alert-error">
                        <div class="alert-title">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>
                        ${MESSAGES.ERROR.LOAD_DATA}
                        <br><small>${MESSAGES.ERROR.CHECK_FILE}</small>
                    </div>
                </div>
            `;
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è StegoLandingPage...');
    new StegoLandingPage();
});

// Smooth scroll –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å
document.addEventListener('click', (e) => {
    const link = e.target.closest('a[href^="#"]');
    if (link) {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
            targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }
});

// Performance monitoring
window.addEventListener('load', () => {
    if (window.performance && window.performance.timing) {
        const navigation = window.performance.timing;
        const loadTime = navigation.loadEventEnd - navigation.navigationStart;

        if (loadTime > 0 && loadTime < 30000) {
            console.log(`‚ö° –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${loadTime}ms`);
        }
    }
});

// ES6 Module Export
export { StegoLandingPage };
